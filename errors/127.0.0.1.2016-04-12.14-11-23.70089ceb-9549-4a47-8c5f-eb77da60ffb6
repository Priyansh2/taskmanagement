(dp1
S'output'
p2
S"<type 'exceptions.ValueError'> need more than 1 value to unpack"
p3
sS'layer'
p4
S'/home/vaibhav/sucks/web2py/applications/login/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n#########################################################################\n\ndef index():\n    if auth.is_logged_in():\n        response.flash = T("WELCOME")\n        redirect(URL(\'default\',\'home\'))\n    else:\n        redirect(URL(\'default\',\'start\'))\n\ndef start():\n    fregister=auth.register()\n    flogin=auth.login()\n    flpswd=auth.request_reset_password()\n    return locals()\n\ndef home():\n    if auth.is_logged_in():\n        if len(request.args):\n            page=int(request.args[0])\n        else: \n            page=0\n        items_per_page=5\n        limitby=((page)*items_per_page,(page+1)*items_per_page+1)\n        rows = db().select(db.project.ALL,limitby=limitby,orderby=~db.project.created_on)\n        return dict(form=FORM(INPUT(_id=\'keyword\',_name=\'keyword\',_onkeyup="ajax(\'callback\', [\'keyword\'], \'target\');")),target_div=DIV(_id=\'target\'),rows=rows,page=page,items_per_page=items_per_page)\n    else:\n        redirect(URL(\'default\',\'start\'))\n\ndef create_project():\n    db.task.created_by.readable=True\n    db.task.created_on.readable=True\n    form=SQLFORM(db.project).process()\n    if form.accepted:\n        redirect(URL(\'home\'))\n    return locals()\n\ndef main():\n    project=db.project(request.args(0,cast=int))\n    row=db((db.task.pid==project.id)).select(orderby=~db.task.created_on)\n    return locals()\n\ndef task():\n    db.task.pid.default=request.args(0)\n    form=SQLFORM(db.task).process()\n    if form.accepted:\n        redirect(URL(\'main\',args=request.args(0)))\n    return locals()\n\n\n\n\n\n\n\n\ndef checklist():\n    form=SQLFORM(db.checklist).process()\n    form.element(\'textarea[name=description]\')[\'_style\'] = \'width:180px;height:100px;\'\n    return locals()\n\n\n\n\n\n\n\nme=auth.user_id\n\n\ndef tm():\n    query=(db.tm.assigned_to==me) | (db.tm.created_by==me)\n    grid=SQLFORM.grid(query, orderby=~db.tm.modified_on,create=False,details=False,editable=False,deletable=lambda  row:(row.created_by==me))\n    return locals()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ndef product():\n    product=SQLFORM(db.product).process()\n    if product.accepted:\n        response.flash="Done"\n    return dict(product=product)\n\n\ndef login():\n    login=SQLFORM(db.auth_user)\n    return dict(form=login)\n\ndef user():\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n\nresponse._vars=response._caller(main)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/vaibhav/sucks/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/vaibhav/sucks/web2py/applications/login/controllers/default.py", line 131, in <module>\n  File "/home/vaibhav/sucks/web2py/gluon/globals.py", line 417, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/vaibhav/sucks/web2py/applications/login/controllers/default.py", line 47, in main\n    row=db((db.task.pid==project.id)).select(orderby=~db.task.created_on)\n  File "/home/vaibhav/sucks/web2py/gluon/packages/dal/pydal/objects.py", line 2020, in select\n    return adapter.select(self.query, fields, attributes)\n  File "/home/vaibhav/sucks/web2py/gluon/packages/dal/pydal/adapters/sqlite.py", line 123, in select\n    return super(SQLiteAdapter, self).select(query, fields, attributes)\n  File "/home/vaibhav/sucks/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1296, in select\n    return self._select_aux(sql,fields,attributes)\n  File "/home/vaibhav/sucks/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1253, in _select_aux\n    self.execute(sql)\n  File "/home/vaibhav/sucks/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1388, in execute\n    return self.log_execute(*a, **b)\n  File "/home/vaibhav/sucks/web2py/gluon/packages/dal/pydal/adapters/base.py", line 1382, in log_execute\n    ret = self.get_cursor().execute(command, *a[1:], **b)\n  File "/usr/lib/python2.7/sqlite3/dbapi2.py", line 68, in convert_timestamp\n    datepart, timepart = val.split(" ")\nValueError: need more than 1 value to unpack\n'
p11
s.